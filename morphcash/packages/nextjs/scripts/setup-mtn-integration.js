#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const readline = require('readline');

/**
 * MTN Mobile Money Integration Setup Script
 * This script helps you configure the MTN Mobile Money API integration
 */

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
}

function logStep(step, message) {
  console.log(`\nüìç Step ${step}: ${message}`);
}

function logSuccess(message) {
  console.log(`‚úÖ ${message}`);
}

function logWarning(message) {
  console.log(`‚ö†Ô∏è  ${message}`);
}

function logError(message) {
  console.log(`‚ùå ${message}`);
}

function logInfo(message) {
  console.log(`‚ÑπÔ∏è  ${message}`);
}

async function checkExistingEnvFile() {
  const envPath = path.join(__dirname, '../.env.local');
  
  if (fs.existsSync(envPath)) {
    logInfo('Found existing .env.local file');
    const overwrite = await question('Do you want to update the existing .env.local file with MTN configuration? (y/n): ');
    return overwrite.toLowerCase() === 'y';
  }
  
  logInfo('No .env.local file found. A new one will be created.');
  return true;
}

async function collectMTNCredentials() {
  logStep(1, 'MTN Mobile Money API Configuration');
  
  console.log(`
Before proceeding, you need to:
1. Go to https://momodeveloper.mtn.com
2. Create a developer account
3. Subscribe to the Collections API
4. Create an API User and generate an API Key
5. Copy your subscription key

If you haven't done this yet, please do so now and come back.
`);

  const hasCredentials = await question('Do you have your MTN API credentials ready? (y/n): ');
  
  if (hasCredentials.toLowerCase() !== 'y') {
    logError('Please obtain your MTN API credentials first and run this script again.');
    process.exit(1);
  }

  const credentials = {};

  credentials.subscriptionKey = await question('Enter your MTN Subscription Key (Primary key from Collections API): ');
  if (!credentials.subscriptionKey.trim()) {
    logError('Subscription key is required');
    process.exit(1);
  }

  credentials.apiUserId = await question('Enter your MTN API User ID (UUID format): ');
  if (!credentials.apiUserId.trim()) {
    logError('API User ID is required');
    process.exit(1);
  }

  // Validate UUID format
  const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
  if (!uuidRegex.test(credentials.apiUserId)) {
    logError('API User ID must be in UUID format (e.g., 12345678-1234-1234-1234-123456789012)');
    process.exit(1);
  }

  credentials.apiKey = await question('Enter your MTN API Key: ');
  if (!credentials.apiKey.trim()) {
    logError('API Key is required');
    process.exit(1);
  }

  const environment = await question('Select environment (1 for sandbox, 2 for production): ');
  credentials.environment = environment === '2' ? 'production' : 'sandbox';

  return credentials;
}

function generateEnvContent(credentials) {
  return `
# =============================================================================
# MTN MOBILE MONEY API CONFIGURATION
# =============================================================================
# Generated by setup-mtn-integration.js on ${new Date().toISOString()}

# MTN Subscription Key (Primary key from your Collections API subscription)
MTN_SUBSCRIPTION_KEY=${credentials.subscriptionKey}

# MTN API User ID (UUID format, created via MTN Developer Portal)
MTN_API_USER_ID=${credentials.apiUserId}

# MTN API Key (generated for your API User)
MTN_API_KEY=${credentials.apiKey}

# MTN Environment (sandbox for testing, production for live)
MTN_ENVIRONMENT=${credentials.environment}

# MTN Target Environment (for API headers, usually same as MTN_ENVIRONMENT)
MTN_TARGET_ENVIRONMENT=${credentials.environment}

# =============================================================================
# Additional Configuration (if not already present)
# =============================================================================

# API base URL for internal requests
NEXT_PUBLIC_API_BASE_URL=http://localhost:3000

# Enable debug logging for MTN integration
NEXT_PUBLIC_MTN_DEBUG=true
`;
}

async function updateEnvFile(credentials) {
  logStep(2, 'Updating environment configuration');
  
  const envPath = path.join(__dirname, '../.env.local');
  let existingContent = '';
  
  if (fs.existsSync(envPath)) {
    existingContent = fs.readFileSync(envPath, 'utf8');
    
    // Remove existing MTN configuration if present
    existingContent = existingContent.replace(
      /# =============================================================================\s*# MTN MOBILE MONEY API CONFIGURATION[\s\S]*?# =============================================================================/g,
      ''
    );
    
    // Remove individual MTN variables if they exist
    existingContent = existingContent.replace(/^MTN_.*$/gm, '');
    
    // Clean up extra newlines
    existingContent = existingContent.replace(/\n\s*\n\s*\n/g, '\n\n');
  }

  const newContent = existingContent + generateEnvContent(credentials);
  
  try {
    fs.writeFileSync(envPath, newContent);
    logSuccess('Environment configuration updated successfully');
  } catch (error) {
    logError(`Failed to update .env.local: ${error.message}`);
    process.exit(1);
  }
}

async function testAPIConnection(credentials) {
  logStep(3, 'Testing MTN API connection');
  
  try {
    // Set environment variables for testing
    process.env.MTN_SUBSCRIPTION_KEY = credentials.subscriptionKey;
    process.env.MTN_API_USER_ID = credentials.apiUserId;
    process.env.MTN_API_KEY = credentials.apiKey;
    process.env.MTN_ENVIRONMENT = credentials.environment;

    const baseUrl = credentials.environment === 'sandbox' 
      ? 'https://sandbox.momodeveloper.mtn.com'
      : 'https://momodeveloper.mtn.com';

    const credentialsAuth = Buffer.from(`${credentials.apiUserId}:${credentials.apiKey}`).toString('base64');

    logInfo('Testing authentication...');
    
    const response = await fetch(`${baseUrl}/collection/token/`, {
      method: 'POST',
      headers: {
        'Authorization': `Basic ${credentialsAuth}`,
        'Ocp-Apim-Subscription-Key': credentials.subscriptionKey,
        'X-Target-Environment': credentials.environment,
        'Content-Type': 'application/json'
      }
    });

    if (response.ok) {
      const tokenData = await response.json();
      logSuccess('MTN API connection successful!');
      logInfo(`Token type: ${tokenData.token_type}`);
      logInfo(`Expires in: ${tokenData.expires_in} seconds`);
      return true;
    } else {
      const errorText = await response.text();
      logError(`MTN API connection failed: ${response.status} ${response.statusText}`);
      logError(`Response: ${errorText}`);
      return false;
    }
  } catch (error) {
    logError(`Failed to test MTN API connection: ${error.message}`);
    return false;
  }
}

function generateTestScript() {
  logStep(4, 'Generating test script');
  
  const testScript = `#!/usr/bin/env node

/**
 * MTN Mobile Money API Test Script
 * Run this script to test your MTN integration
 */

require('dotenv').config({ path: '.env.local' });

async function testMTNIntegration() {
  console.log('üß™ Testing MTN Mobile Money Integration\\n');

  // Check environment variables
  const requiredVars = [
    'MTN_SUBSCRIPTION_KEY',
    'MTN_API_USER_ID', 
    'MTN_API_KEY',
    'MTN_ENVIRONMENT'
  ];

  for (const varName of requiredVars) {
    if (!process.env[varName]) {
      console.error(\`‚ùå Missing environment variable: \${varName}\`);
      process.exit(1);
    }
  }

  console.log('‚úÖ All environment variables present');

  // Test authentication
  try {
    const response = await fetch('http://localhost:3000/api/mtn/auth', {
      method: 'POST'
    });

    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ Authentication test passed');
      console.log(\`   Token type: \${data.token_type}\`);
      console.log(\`   Expires in: \${data.expires_in} seconds\`);
    } else {
      console.error('‚ùå Authentication test failed');
      const error = await response.json();
      console.error(\`   Error: \${error.message}\`);
    }
  } catch (error) {
    console.error('‚ùå Failed to test authentication:', error.message);
    console.error('   Make sure your Next.js development server is running');
  }
}

testMTNIntegration();
`;

  const testScriptPath = path.join(__dirname, 'test-mtn-integration.js');
  
  try {
    fs.writeFileSync(testScriptPath, testScript);
    fs.chmodSync(testScriptPath, '755');
    logSuccess('Test script generated: scripts/test-mtn-integration.js');
    logInfo('Run "node scripts/test-mtn-integration.js" to test your integration');
  } catch (error) {
    logWarning(`Failed to create test script: ${error.message}`);
  }
}

function displayNextSteps() {
  console.log(`
üéâ MTN Mobile Money Integration Setup Complete!

üìã Next Steps:

1. üöÄ Start your development server:
   yarn start

2. üß™ Test the integration:
   node scripts/test-mtn-integration.js

3. üí≥ Test payment flows:
   - Go to your app's dashboard
   - Try creating a virtual card
   - Select "MTN Mobile Money" as payment method
   - Test with different amounts:
     ‚Ä¢ 1-19 GHS: PENDING status
     ‚Ä¢ 20-79 GHS: FAILED status  
     ‚Ä¢ 80+ GHS: SUCCESSFUL status

4. üìö Read the documentation:
   - Check MTN_MOBILE_MONEY_INTEGRATION.md
   - Review the API endpoints in pages/api/mtn/

5. üîß For production:
   - Change MTN_ENVIRONMENT to "production"
   - Update MTN credentials with production values
   - Test thoroughly before going live

‚ö†Ô∏è  Important Notes:
- Keep your API credentials secure
- Never commit .env.local to version control
- Use different credentials for development and production
- Monitor your API usage on the MTN Developer Portal

üìû Support:
- MTN Developer Portal: https://momodeveloper.mtn.com
- Documentation: https://momodeveloper.mtn.com/api-documentation/api-description

Happy coding! üöÄ
`);
}

async function main() {
  console.log(`
üéØ MTN Mobile Money Integration Setup
======================================

This script will help you configure MTN Mobile Money API integration
for your MorphCash application.

`);

  try {
    // Check if we should proceed with env file update
    const shouldUpdate = await checkExistingEnvFile();
    if (!shouldUpdate) {
      logInfo('Setup cancelled by user');
      rl.close();
      return;
    }

    // Collect MTN credentials
    const credentials = await collectMTNCredentials();

    // Update environment file
    await updateEnvFile(credentials);

    // Test API connection
    const connectionSuccess = await testAPIConnection(credentials);
    
    if (!connectionSuccess) {
      logWarning('API connection test failed. Please check your credentials.');
      const continueSetup = await question('Continue with setup anyway? (y/n): ');
      if (continueSetup.toLowerCase() !== 'y') {
        process.exit(1);
      }
    }

    // Generate test script
    generateTestScript();

    // Display next steps
    displayNextSteps();

  } catch (error) {
    logError(`Setup failed: ${error.message}`);
    process.exit(1);
  } finally {
    rl.close();
  }
}

// Handle global fetch for Node.js versions that don't have it
if (typeof fetch === 'undefined') {
  global.fetch = require('node-fetch');
}

main();
