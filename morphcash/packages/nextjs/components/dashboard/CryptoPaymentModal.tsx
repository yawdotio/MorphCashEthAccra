"use client";

import { useState, useEffect } from "react";
import { 
  XMarkIcon, 
  CurrencyDollarIcon,
  CheckCircleIcon,
  ExclamationTriangleIcon,
  ArrowPathIcon,
  ClipboardDocumentIcon
} from "@heroicons/react/24/outline";
import { paymentService, SupportedCurrency } from "~~/services/paymentService";
import { useCopyToClipboard } from "~~/hooks/scaffold-eth";

interface CryptoPaymentModalProps {
  isOpen: boolean;
  onClose: () => void;
  onPaymentSuccess: () => void;
  fundingAmount: number;
  feeAmount: number;
  totalAmount: number;
  ethAmount: number;
  currency: SupportedCurrency;
}

type PaymentStatus = 'pending' | 'waiting' | 'confirming' | 'success' | 'failed' | 'expired';

interface ExchangeRate {
  ghsToEth: number;
  ethToGhs: number;
  lastUpdated: string;
}

export const CryptoPaymentModal = ({
  isOpen,
  onClose,
  onPaymentSuccess,
  fundingAmount,
  feeAmount,
  totalAmount,
  ethAmount,
  currency
}: CryptoPaymentModalProps) => {
  const [paymentStatus, setPaymentStatus] = useState<PaymentStatus>('pending');
  const [exchangeRate, setExchangeRate] = useState<ExchangeRate | null>(null);
  const [isLoadingRate, setIsLoadingRate] = useState(false);
  const [paymentAddress, setPaymentAddress] = useState('');
  const [paymentReference, setPaymentReference] = useState('');
  const [timeRemaining, setTimeRemaining] = useState(900); // 15 minutes in seconds
  const [copied, setCopied] = useState(false);
  const { copyToClipboard } = useCopyToClipboard();

  // Generate payment address and reference
  useEffect(() => {
    if (isOpen && paymentStatus === 'pending') {
      // In a real implementation, this would be generated by your backend
      // For demo purposes, we'll use a placeholder address
      setPaymentAddress('0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6');
      setPaymentReference('CRYPTO' + Date.now().toString().slice(-8));
    }
  }, [isOpen, paymentStatus]);

  // Fetch real-time exchange rate
  const fetchExchangeRate = async () => {
    setIsLoadingRate(true);
    try {
      const rate = await paymentService.getExchangeRate();
      setExchangeRate(rate);
    } catch (error) {
      console.error('Error fetching exchange rate:', error);
    } finally {
      setIsLoadingRate(false);
    }
  };

  // Timer countdown
  useEffect(() => {
    let interval: NodeJS.Timeout;
    if (paymentStatus === 'waiting' && timeRemaining > 0) {
      interval = setInterval(() => {
        setTimeRemaining(prev => {
          if (prev <= 1) {
            setPaymentStatus('expired');
            return 0;
          }
          return prev - 1;
        });
      }, 1000);
    }
    return () => clearInterval(interval);
  }, [paymentStatus, timeRemaining]);

  // Simulate payment monitoring
  useEffect(() => {
    if (paymentStatus === 'waiting') {
      // In a real implementation, this would monitor the blockchain for the transaction
      const checkPayment = async () => {
        // Simulate checking for payment every 10 seconds
        const interval = setInterval(async () => {
          // Simulate payment detection (90% success rate for demo)
          const isPaymentDetected = Math.random() > 0.7;
          
          if (isPaymentDetected) {
            setPaymentStatus('confirming');
            clearInterval(interval);
            
            // Simulate confirmation delay
            setTimeout(() => {
              setPaymentStatus('success');
              setTimeout(() => {
                onPaymentSuccess();
              }, 2000);
            }, 3000);
          }
        }, 10000);

        // Cleanup after 15 minutes
        setTimeout(() => {
          clearInterval(interval);
        }, 900000);
      };

      checkPayment();
    }
  }, [paymentStatus, onPaymentSuccess]);

  const handleInitiatePayment = () => {
    setPaymentStatus('waiting');
    setTimeRemaining(900); // Reset timer
    fetchExchangeRate();
  };

  const handleCopyAddress = async () => {
    try {
      copyToClipboard(paymentAddress);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (error) {
      console.error('Failed to copy address:', error);
    }
  };

  const handleCopyAmount = async () => {
    try {
      copyToClipboard(ethAmount.toString());
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (error) {
      console.error('Failed to copy amount:', error);
    }
  };

  const handleClose = () => {
    if (paymentStatus === 'confirming') return; // Prevent closing during confirmation
    setPaymentStatus('pending');
    setTimeRemaining(900);
    onClose();
  };

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-2xl p-8 max-w-md w-full mx-4 relative">
        {/* Close Button */}
        {paymentStatus !== 'confirming' && (
          <button
            onClick={handleClose}
            className="absolute top-4 right-4 text-gray-400 hover:text-gray-600"
          >
            <XMarkIcon className="h-6 w-6" />
          </button>
        )}

        {/* Header */}
        <div className="text-center mb-8">
          <div className="w-16 h-16 bg-orange-100 rounded-xl flex items-center justify-center mx-auto mb-4">
            <CurrencyDollarIcon className="h-8 w-8 text-orange-600" />
          </div>
          <h2 className="text-2xl font-bold text-gray-900 mb-2">Crypto Payment</h2>
          <p className="text-gray-600">Pay with Ethereum (ETH)</p>
        </div>

        {/* Payment Summary */}
        <div className="bg-gray-50 rounded-xl p-4 mb-6">
          <div className="flex justify-between items-center mb-2">
            <span className="text-gray-600">Funding Amount:</span>
            <span className="font-semibold">{paymentService.formatCurrency(fundingAmount, currency)}</span>
          </div>
          <div className="flex justify-between items-center mb-2">
            <span className="text-gray-600">Platform Fee (0.02%):</span>
            <span className="font-semibold">{paymentService.formatCurrency(feeAmount, currency)}</span>
          </div>
          <div className="flex justify-between items-center border-t pt-2">
            <span className="text-gray-900 font-semibold">Total Amount:</span>
            <span className="text-lg font-bold text-orange-600">{paymentService.formatCurrency(totalAmount, currency)}</span>
          </div>
        </div>

        {/* Exchange Rate Info */}
        {exchangeRate && (
          <div className="bg-blue-50 rounded-xl p-4 mb-6">
            <div className="flex items-center justify-between mb-2">
              <span className="text-sm text-blue-800">Current Exchange Rate:</span>
              <button
                onClick={fetchExchangeRate}
                disabled={isLoadingRate}
                className="text-blue-600 hover:text-blue-800 disabled:opacity-50"
              >
                <ArrowPathIcon className={`h-4 w-4 ${isLoadingRate ? 'animate-spin' : ''}`} />
              </button>
            </div>
            <div className="text-sm text-blue-700">
              {currency === 'GHS' ? (
                <>
                  <p>1 ETH = GHS {exchangeRate.ethToGhs.toFixed(2)}</p>
                  <p>1 GHS = ETH {exchangeRate.ghsToEth.toFixed(8)}</p>
                </>
              ) : (
                <>
                  <p>1 ETH = ${exchangeRate.ethToUsd.toFixed(2)}</p>
                  <p>1 USD = ETH {exchangeRate.usdToEth.toFixed(8)}</p>
                </>
              )}
              <p className="text-xs text-blue-600 mt-1">
                Last updated: {new Date(exchangeRate.lastUpdated).toLocaleTimeString()}
              </p>
            </div>
          </div>
        )}

        {/* Payment Status */}
        {paymentStatus === 'pending' && (
          <div className="space-y-6">
            <div className="text-center">
              <h3 className="text-lg font-semibold text-gray-900 mb-2">Ready to Pay</h3>
              <p className="text-gray-600 mb-4">
                You will need to send exactly <strong>ETH {ethAmount.toFixed(6)}</strong> to complete the payment.
              </p>
            </div>

            <button
              onClick={handleInitiatePayment}
              className="w-full bg-orange-600 text-white py-3 rounded-xl font-semibold hover:bg-orange-700 transition-colors"
            >
              Generate Payment Details
            </button>
          </div>
        )}

        {/* Waiting for Payment */}
        {paymentStatus === 'waiting' && (
          <div className="space-y-6">
            <div className="text-center">
              <div className="w-16 h-16 bg-orange-100 rounded-xl flex items-center justify-center mx-auto mb-4">
                <div className="animate-pulse w-8 h-8 bg-orange-600 rounded-full"></div>
              </div>
            <h3 className="text-lg font-semibold text-gray-900 mb-2">Awaiting Payment</h3>
            <p className="text-gray-600 mb-4">
              Send exactly <strong>ETH {ethAmount.toFixed(6)}</strong> to the address below to fund your MorphCard
            </p>
            </div>

            {/* Payment Details */}
            <div className="space-y-4">
              <div className="bg-gray-50 rounded-xl p-4">
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Payment Address
                </label>
                <div className="flex items-center space-x-2">
                  <input
                    type="text"
                    value={paymentAddress}
                    readOnly
                    className="flex-1 px-3 py-2 bg-white border border-gray-300 rounded-lg text-sm font-mono"
                  />
                  <button
                    onClick={handleCopyAddress}
                    className="p-2 text-gray-500 hover:text-gray-700"
                  >
                    <ClipboardDocumentIcon className="h-5 w-5" />
                  </button>
                </div>
              </div>

              <div className="bg-gray-50 rounded-xl p-4">
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Amount to Send
                </label>
                <div className="flex items-center space-x-2">
                  <input
                    type="text"
                    value={`ETH ${ethAmount.toFixed(6)}`}
                    readOnly
                    className="flex-1 px-3 py-2 bg-white border border-gray-300 rounded-lg text-sm font-mono"
                  />
                  <button
                    onClick={handleCopyAmount}
                    className="p-2 text-gray-500 hover:text-gray-700"
                  >
                    <ClipboardDocumentIcon className="h-5 w-5" />
                  </button>
                </div>
              </div>

              <div className="bg-orange-50 rounded-xl p-4">
                <p className="text-sm text-orange-800">
                  <strong>Reference:</strong> {paymentReference}
                </p>
                <p className="text-sm text-orange-600 mt-1">
                  Time remaining: {formatTime(timeRemaining)}
                </p>
              </div>
            </div>

            {copied && (
              <div className="text-center text-green-600 text-sm">
                ✓ Copied to clipboard!
              </div>
            )}
          </div>
        )}

        {/* Confirming Payment */}
        {paymentStatus === 'confirming' && (
          <div className="text-center py-8">
            <div className="w-16 h-16 bg-blue-100 rounded-xl flex items-center justify-center mx-auto mb-4">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
            </div>
            <h3 className="text-lg font-semibold text-gray-900 mb-2">Verifying Payment & Creating MorphCard</h3>
            <p className="text-gray-600 mb-4">
              We've detected your payment and are confirming it on the blockchain. Your MorphCard will be created once confirmed...
            </p>
            <div className="bg-blue-50 rounded-xl p-4">
              <p className="text-sm text-blue-800">
                <strong>Reference:</strong> {paymentReference}
              </p>
              <p className="text-sm text-blue-600 mt-1">
                Amount: ETH {ethAmount.toFixed(6)}
              </p>
            </div>
          </div>
        )}

        {/* Success State */}
        {paymentStatus === 'success' && (
          <div className="text-center py-8">
            <div className="w-16 h-16 bg-green-100 rounded-xl flex items-center justify-center mx-auto mb-4">
              <CheckCircleIcon className="h-8 w-8 text-green-600" />
            </div>
            <h3 className="text-lg font-semibold text-gray-900 mb-2">Payment Confirmed!</h3>
            <p className="text-gray-600 mb-4">
              Your MorphCard is being created and will appear in your dashboard shortly...
            </p>
            <div className="bg-green-50 rounded-xl p-4">
              <p className="text-sm text-green-800">
                <strong>Reference:</strong> {paymentReference}
              </p>
              <p className="text-sm text-green-600 mt-1">
                Amount: ETH {ethAmount.toFixed(6)}
              </p>
            </div>
          </div>
        )}

        {/* Failed/Expired State */}
        {(paymentStatus === 'failed' || paymentStatus === 'expired') && (
          <div className="text-center py-8">
            <div className="w-16 h-16 bg-red-100 rounded-xl flex items-center justify-center mx-auto mb-4">
              <ExclamationTriangleIcon className="h-8 w-8 text-red-600" />
            </div>
            <h3 className="text-lg font-semibold text-gray-900 mb-2">
              {paymentStatus === 'expired' ? 'Payment Expired' : 'Payment Failed'}
            </h3>
            <p className="text-gray-600 mb-4">
              {paymentStatus === 'expired' 
                ? 'The payment window has expired. Please try again.'
                : 'There was an issue processing your payment. Please try again.'
              }
            </p>
            <div className="space-y-3">
              <button
                onClick={() => setPaymentStatus('pending')}
                className="w-full bg-red-600 text-white py-3 rounded-xl font-semibold hover:bg-red-700 transition-colors"
              >
                Try Again
              </button>
              <button
                onClick={handleClose}
                className="w-full bg-gray-200 text-gray-800 py-3 rounded-xl font-semibold hover:bg-gray-300 transition-colors"
              >
                Cancel
              </button>
            </div>
          </div>
        )}

        {/* Footer */}
        {paymentStatus === 'waiting' && (
          <div className="mt-6 text-center">
            <p className="text-xs text-gray-500">
              Send the exact amount to the address above. Your payment will be confirmed automatically.
            </p>
          </div>
        )}
      </div>
    </div>
  );
};
