"use client";

import { useState, useEffect } from "react";
import { XMarkIcon, CreditCardIcon, InformationCircleIcon, CheckCircleIcon } from "@heroicons/react/24/outline";
import { calculateFundingFee, formatCurrency, validateFundingAmount, getFeeInfo, getTotalWithFee } from "~~/utils/feeCalculation";
import { generateExpiryDate, generateCardNumber, generateCardType } from "~~/utils/cardUtils";

interface CreateVirtualCardModalProps {
  isOpen: boolean;
  onClose: () => void;
  onCreateCard: (cardData: {
    cardName: string;
    cardNumber: string;
    expiryDate: string;
    cardType: string;
    spendingLimit: number;
    fundingAmount: number;
    feeAmount: number;
    totalAmount: number;
  }) => void;
}

export const CreateVirtualCardModal = ({ isOpen, onClose, onCreateCard }: CreateVirtualCardModalProps) => {
  const [formData, setFormData] = useState({
    cardName: "",
    cardNumber: generateCardNumber(),
    expiryDate: generateExpiryDate(),
    cardType: generateCardType(),
    spendingLimit: 1000,
    fundingAmount: 100,
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [validationError, setValidationError] = useState<string | null>(null);
  const [feeCalculation, setFeeCalculation] = useState(calculateFundingFee(100));
  const [showSuccess, setShowSuccess] = useState(false);

  // Update fee calculation when funding amount changes
  useEffect(() => {
    const validation = validateFundingAmount(formData.fundingAmount);
    if (validation.isValid) {
      setValidationError(null);
      setFeeCalculation(calculateFundingFee(formData.fundingAmount));
    } else {
      setValidationError(validation.error || null);
    }
  }, [formData.fundingAmount]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    // Validate funding amount before submitting
    const validation = validateFundingAmount(formData.fundingAmount);
    if (!validation.isValid) {
      setValidationError(validation.error || null);
      return;
    }

    setIsSubmitting(true);

    try {
      // Generate a masked card number (in production, this would be generated by your payment processor)
      const maskedNumber = `****${Math.floor(Math.random() * 9000) + 1000}`;
      
      await onCreateCard({
        ...formData,
        cardNumber: maskedNumber,
        fundingAmount: feeCalculation.originalAmount,
        feeAmount: feeCalculation.feeAmount,
        totalAmount: feeCalculation.totalAmount,
      });
      
      // Show success state
      setShowSuccess(true);
      
      // Reset form after success
      setTimeout(() => {
        setFormData({
          cardName: "",
          cardNumber: generateCardNumber(),
          expiryDate: generateExpiryDate(),
          cardType: generateCardType(),
          spendingLimit: 1000,
          fundingAmount: 100,
        });
        setShowSuccess(false);
        onClose();
      }, 2000);
    } catch (error) {
      console.error("Error creating card:", error);
    } finally {
      setIsSubmitting(false);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 z-50 overflow-y-auto">
      <div className="flex min-h-screen items-center justify-center p-4 text-center sm:p-0">
        <div className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" onClick={onClose} />
        
        <div className="relative transform overflow-hidden rounded-lg bg-white px-4 pb-4 pt-5 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg sm:p-6">
          <div className="absolute right-0 top-0 pr-4 pt-4">
            <button
              type="button"
              className="rounded-md bg-white text-gray-400 hover:text-gray-600 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
              onClick={onClose}
            >
              <XMarkIcon className="h-6 w-6" />
            </button>
          </div>

          <div className="sm:flex sm:items-start">
            <div className="mx-auto flex h-12 w-12 flex-shrink-0 items-center justify-center rounded-full bg-purple-100 sm:mx-0 sm:h-10 sm:w-10">
              <CreditCardIcon className="h-6 w-6 text-purple-600" />
            </div>
            <div className="mt-3 text-center sm:ml-4 sm:mt-0 sm:text-left w-full">
              <h3 className="text-lg font-medium leading-6 text-gray-900">
                Create Virtual Card
              </h3>
              <div className="mt-2">
                <p className="text-sm text-gray-500">
                  Create a new virtual card for secure online payments.
                </p>
              </div>

              <form onSubmit={handleSubmit} className="mt-4 space-y-4">
                <div>
                  <label htmlFor="cardName" className="block text-sm font-medium text-gray-700">
                    Card Name
                  </label>
                  <input
                    type="text"
                    name="cardName"
                    id="cardName"
                    value={formData.cardName}
                    onChange={(e) => setFormData({...formData, cardName: e.target.value})}
                    required
                    className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-purple-500 focus:ring-purple-500 sm:text-sm"
                    placeholder="e.g., Shopping Card"
                  />
                </div>

                <div>
                  <label htmlFor="cardNumber" className="block text-sm font-medium text-gray-700">
                    Card Number
                  </label>
                  <div className="mt-1 block w-full rounded-md border-gray-300 bg-gray-50 px-3 py-2 text-sm text-gray-600">
                    {formData.cardNumber} (System Generated)
                  </div>
                  <p className="mt-1 text-xs text-gray-500">
                    Card number is automatically generated for security
                  </p>
                </div>

                <div>
                  <label htmlFor="cardType" className="block text-sm font-medium text-gray-700">
                    Card Type
                  </label>
                  <div className="mt-1 block w-full rounded-md border-gray-300 bg-gray-50 px-3 py-2 text-sm text-gray-600">
                    {formData.cardType} (System Generated)
                  </div>
                  <p className="mt-1 text-xs text-gray-500">
                    Card type is automatically assigned for optimal compatibility
                  </p>
                </div>

                <div>
                  <label htmlFor="expiryDate" className="block text-sm font-medium text-gray-700">
                    Expiry Date
                  </label>
                  <div className="mt-1 block w-full rounded-md border-gray-300 bg-gray-50 px-3 py-2 text-sm text-gray-600">
                    {formData.expiryDate} (System Generated)
                  </div>
                  <p className="mt-1 text-xs text-gray-500">
                    Expiry date is automatically set to 3 years from now
                  </p>
                </div>

                <div>
                  <label htmlFor="fundingAmount" className="block text-sm font-medium text-gray-700">
                    Funding Amount (₵)
                  </label>
                  <input
                    type="number"
                    name="fundingAmount"
                    id="fundingAmount"
                    value={formData.fundingAmount}
                    onChange={(e) => setFormData({...formData, fundingAmount: parseFloat(e.target.value) || 0})}
                    required
                    min="1"
                    step="0.01"
                    className={`mt-1 block w-full rounded-md shadow-sm focus:border-purple-500 focus:ring-purple-500 sm:text-sm ${
                      validationError ? 'border-red-300' : 'border-gray-300'
                    }`}
                    placeholder="Enter amount to fund the card"
                  />
                  {validationError && (
                    <p className="mt-1 text-sm text-red-600">{validationError}</p>
                  )}
                </div>

                {/* Fee Information */}
                <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                  <div className="flex">
                    <InformationCircleIcon className="h-5 w-5 text-blue-400 mt-0.5 mr-3" />
                    <div className="flex-1">
                      <h4 className="text-sm font-medium text-blue-800">Funding Fee</h4>
                      <div className="mt-2 space-y-1 text-sm text-blue-700">
                        <p>Amount: {formatCurrency(feeCalculation.originalAmount)}</p>
                        <p>{getFeeInfo(feeCalculation.originalAmount)}</p>
                        <p className="font-semibold">{getTotalWithFee(feeCalculation.originalAmount)}</p>
                      </div>
                    </div>
                  </div>
                </div>

                <div>
                  <label htmlFor="spendingLimit" className="block text-sm font-medium text-gray-700">
                    Spending Limit (₵)
                  </label>
                  <input
                    type="number"
                    name="spendingLimit"
                    id="spendingLimit"
                    value={formData.spendingLimit}
                    onChange={(e) => setFormData({...formData, spendingLimit: parseInt(e.target.value) || 0})}
                    required
                    min="1"
                    className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-purple-500 focus:ring-purple-500 sm:text-sm"
                  />
                </div>

                <div className="mt-5 sm:mt-4 sm:flex sm:flex-row-reverse">
                  <button
                    type="submit"
                    disabled={isSubmitting || !!validationError}
                    className="inline-flex w-full justify-center rounded-md border border-transparent bg-purple-600 px-4 py-2 text-base font-medium text-white shadow-sm hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed sm:ml-3 sm:w-auto sm:text-sm"
                  >
                    {isSubmitting ? "Creating..." : `Create Card (${getTotalWithFee(feeCalculation.originalAmount)})`}
                  </button>
                  <button
                    type="button"
                    className="mt-3 inline-flex w-full justify-center rounded-md border border-gray-300 bg-white px-4 py-2 text-base font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 sm:mt-0 sm:w-auto sm:text-sm"
                    onClick={onClose}
                  >
                    Cancel
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
      
      {/* Success State */}
      {showSuccess && (
        <div className="fixed inset-0 z-50 overflow-y-auto">
          <div className="flex min-h-screen items-center justify-center p-4 text-center sm:p-0">
            <div className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" />
            
            <div className="relative transform overflow-hidden rounded-2xl bg-white px-4 pb-4 pt-5 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-md sm:p-6">
              <div className="sm:flex sm:items-start">
                <div className="mx-auto flex h-12 w-12 flex-shrink-0 items-center justify-center rounded-full bg-green-100 sm:mx-0 sm:h-10 sm:w-10">
                  <CheckCircleIcon className="h-6 w-6 text-green-600" />
                </div>
                <div className="mt-3 text-center sm:ml-4 sm:mt-0 sm:text-left w-full">
                  <h3 className="text-lg font-medium leading-6 text-gray-900 mb-2">
                    Card Created Successfully!
                  </h3>
                  <div className="mt-2">
                    <p className="text-sm text-gray-500 mb-4">
                      Your virtual card has been created and is ready to use. Click on the card icon to view details.
                    </p>
                    
                    {/* Card Preview */}
                    <div className="w-full h-20 rounded-xl shadow-lg mb-4 bg-gradient-to-br from-purple-600 to-blue-600">
                      <div className="p-3 h-full flex flex-col justify-between text-white">
                        <div className="flex justify-between items-start">
                          <div className="w-6 h-6 bg-white/20 rounded-full flex items-center justify-center">
                            <span className="text-xs font-bold">C</span>
                          </div>
                          <div className="w-2 h-2 rounded-full bg-green-400" />
                        </div>
                        <div className="text-right">
                          <p className="text-xs opacity-80">Card Number</p>
                          <p className="text-sm font-mono font-bold">
                            {formData.cardNumber}
                          </p>
                        </div>
                        <div className="text-xs opacity-90 truncate">
                          {formData.cardName}
                        </div>
                      </div>
                    </div>
                    
                    <p className="text-xs text-gray-400">
                      This modal will close automatically in a moment...
                    </p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};
