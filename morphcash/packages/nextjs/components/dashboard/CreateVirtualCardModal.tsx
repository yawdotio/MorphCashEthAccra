"use client";

import { useState, useEffect } from "react";
import { XMarkIcon, CreditCardIcon, CheckCircleIcon, PhoneIcon, CurrencyDollarIcon } from "@heroicons/react/24/outline";
import { generateExpiryDate, generateCardNumber, generateCardType } from "~~/utils/cardUtils";
import { MTNMobileMoneyPaymentModal } from "./MTNMobileMoneyPaymentModal";
import { CryptoPaymentModal } from "./CryptoPaymentModal";

interface CreateVirtualCardModalProps {
  isOpen: boolean;
  onClose: () => void;
  onCreateCard: (cardData: {
    cardName: string;
    cardNumber: string;
    expiryDate: string;
    cardType: string;
    spendingLimit: number;
    fundingAmount: number;
    feeAmount: number;
    totalAmount: number;
  }) => void;
}

export const CreateVirtualCardModal = ({ isOpen, onClose, onCreateCard }: CreateVirtualCardModalProps) => {
  const [formData, setFormData] = useState({
    cardName: "",
    cardNumber: generateCardNumber(),
    expiryDate: generateExpiryDate(),
    cardType: "MorphCard",
    spendingLimit: 1000,
    fundingAmount: 100,
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [showSuccess, setShowSuccess] = useState(false);
  
  // Payment workflow states
  const [showMTNMobileMoney, setShowMTNMobileMoney] = useState(false);
  const [showCryptoPayment, setShowCryptoPayment] = useState(false);
  const [ethAmount, setEthAmount] = useState(0);
  const [selectedCurrency, setSelectedCurrency] = useState<'GHS' | 'USD'>('GHS');
  const [selectedFundingMethod, setSelectedFundingMethod] = useState<'momo' | 'crypto' | null>(null);

  const handleFundingMethodSelect = (method: 'momo' | 'crypto') => {
    setSelectedFundingMethod(method);
    
    if (method === 'momo') {
      setShowMTNMobileMoney(true);
    } else {
      setShowCryptoPayment(true);
    }
  };

  const handlePaymentSuccess = async () => {
    setIsSubmitting(true);
    
    try {
      // Generate a masked card number (in production, this would be generated by your payment processor)
      const maskedNumber = `****${Math.floor(Math.random() * 9000) + 1000}`;
      
      await onCreateCard({
        ...formData,
        cardNumber: maskedNumber,
        fundingAmount: formData.fundingAmount,
        feeAmount: 0, // No fees for now
        totalAmount: formData.fundingAmount,
      });
      
      // Close payment modals
      setShowMTNMobileMoney(false);
      setShowCryptoPayment(false);
      
      // Show success state
      setShowSuccess(true);
      
      // Reset form after success
      setTimeout(() => {
        setFormData({
          cardName: "",
          cardNumber: generateCardNumber(),
          expiryDate: generateExpiryDate(),
          cardType: "MorphCard",
          spendingLimit: 1000,
          fundingAmount: 100,
        });
        setSelectedFundingMethod(null);
        setShowSuccess(false);
        onClose();
      }, 2000);
    } catch (error) {
      console.error("Error creating card:", error);
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleClose = () => {
    // Reset all states
    setShowMTNMobileMoney(false);
    setShowCryptoPayment(false);
    setShowSuccess(false);
    setSelectedFundingMethod(null);
    onClose();
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 z-50 overflow-y-auto">
      <div className="flex min-h-screen items-center justify-center p-4 text-center sm:p-0">
        <div className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" onClick={onClose} />
        
        <div className="relative transform overflow-hidden rounded-lg bg-white px-4 pb-4 pt-5 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-2xl sm:p-6">
          <div className="absolute right-0 top-0 pr-4 pt-4">
            <button
              type="button"
              className="rounded-md bg-white text-gray-400 hover:text-gray-600 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
              onClick={onClose}
            >
              <XMarkIcon className="h-6 w-6" />
            </button>
          </div>

          <div className="sm:flex sm:items-start">
            <div className="mx-auto flex h-12 w-12 flex-shrink-0 items-center justify-center rounded-full bg-purple-100 sm:mx-0 sm:h-10 sm:w-10">
              <CreditCardIcon className="h-6 w-6 text-purple-600" />
            </div>
            <div className="mt-3 text-center sm:ml-4 sm:mt-0 sm:text-left w-full">
              <h3 className="text-lg font-medium leading-6 text-gray-900">
                Create Virtual Card
              </h3>
              <div className="mt-2">
                <p className="text-sm text-gray-500">
                  Create a new MorphCard for secure online payments.
                </p>
              </div>

              {/* Scrollable form content */}
              <div className="mt-4 max-h-96 overflow-y-auto pr-2">
                <form className="space-y-4">
                  <div>
                    <label htmlFor="cardName" className="block text-sm font-medium text-gray-700">
                      Card Name
                    </label>
                    <input
                      type="text"
                      name="cardName"
                      id="cardName"
                      value={formData.cardName}
                      onChange={(e) => setFormData({...formData, cardName: e.target.value})}
                      required
                      className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-purple-500 focus:ring-purple-500 sm:text-sm"
                      placeholder="e.g., Shopping Card"
                    />
                  </div>

                  <div>
                    <label htmlFor="fundingAmount" className="block text-sm font-medium text-gray-700">
                      Funding Amount (₵)
                    </label>
                    <input
                      type="number"
                      name="fundingAmount"
                      id="fundingAmount"
                      value={formData.fundingAmount}
                      onChange={(e) => setFormData({...formData, fundingAmount: parseFloat(e.target.value) || 0})}
                      required
                      min="1"
                      step="0.01"
                      className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-purple-500 focus:ring-purple-500 sm:text-sm"
                      placeholder="Enter amount to fund the card"
                    />
                  </div>

                  <div>
                    <label htmlFor="spendingLimit" className="block text-sm font-medium text-gray-700">
                      Spending Limit (₵)
                    </label>
                    <input
                      type="number"
                      name="spendingLimit"
                      id="spendingLimit"
                      value={formData.spendingLimit}
                      onChange={(e) => setFormData({...formData, spendingLimit: parseInt(e.target.value) || 0})}
                      required
                      min="1"
                      className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-purple-500 focus:ring-purple-500 sm:text-sm"
                    />
                  </div>

                  {/* Card Preview */}
                  <div className="bg-gradient-to-br from-blue-100 to-purple-100 rounded-lg p-4">
                    <h4 className="text-sm font-medium text-gray-700 mb-3">Card Preview</h4>
                    <div className="w-full h-20 rounded-xl shadow-lg bg-gradient-to-br from-blue-500 to-purple-600">
                      <div className="p-3 h-full flex flex-col justify-between text-white">
                        <div className="flex justify-between items-start">
                          <div className="w-6 h-6 bg-white/20 rounded-full flex items-center justify-center">
                            <span className="text-xs font-bold">M</span>
                          </div>
                          <div className="w-2 h-2 rounded-full bg-green-400" />
                        </div>
                        <div className="text-right">
                          <p className="text-xs opacity-80">Card Number</p>
                          <p className="text-sm font-mono font-bold">
                            {formData.cardNumber}
                          </p>
                        </div>
                        <div className="text-xs opacity-90 truncate">
                          {formData.cardName || "Card Name"}
                        </div>
                      </div>
                    </div>
                    <p className="text-xs text-gray-500 mt-2">
                      Card details are automatically generated for security
                    </p>
                  </div>
                </form>
              </div>

              {/* Funding Method Selection */}
              <div className="mt-6">
                <h4 className="text-sm font-medium text-gray-700 mb-3">Choose Funding Method</h4>
                <div className="grid grid-cols-1 gap-3 sm:grid-cols-2">
                  <button
                    type="button"
                    onClick={() => handleFundingMethodSelect('momo')}
                    className="relative rounded-lg border border-gray-300 bg-white px-6 py-4 text-left shadow-sm focus:outline-none focus:ring-2 focus:ring-purple-500 hover:bg-gray-50"
                  >
                    <div className="flex items-center">
                      <PhoneIcon className="h-8 w-8 text-orange-600" />
                      <div className="ml-4">
                        <h3 className="text-sm font-medium text-gray-900">MTN Mobile Money</h3>
                        <p className="text-xs text-gray-500">Fund with MOMO</p>
                      </div>
                    </div>
                  </button>

                  <button
                    type="button"
                    onClick={() => handleFundingMethodSelect('crypto')}
                    className="relative rounded-lg border border-gray-300 bg-white px-6 py-4 text-left shadow-sm focus:outline-none focus:ring-2 focus:ring-purple-500 hover:bg-gray-50"
                  >
                    <div className="flex items-center">
                      <CurrencyDollarIcon className="h-8 w-8 text-blue-600" />
                      <div className="ml-4">
                        <h3 className="text-sm font-medium text-gray-900">Crypto Payment</h3>
                        <p className="text-xs text-gray-500">Fund with ETH/USD</p>
                      </div>
                    </div>
                  </button>
                </div>
              </div>

              <div className="mt-6 sm:flex sm:flex-row-reverse">
                <button
                  type="button"
                  className="mt-3 inline-flex w-full justify-center rounded-md border border-gray-300 bg-white px-4 py-2 text-base font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 sm:mt-0 sm:w-auto sm:text-sm"
                  onClick={handleClose}
                >
                  Cancel
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      {/* Success State */}
      {showSuccess && (
        <div className="fixed inset-0 z-50 overflow-y-auto">
          <div className="flex min-h-screen items-center justify-center p-4 text-center sm:p-0">
            <div className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" />
            
            <div className="relative transform overflow-hidden rounded-2xl bg-white px-4 pb-4 pt-5 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-md sm:p-6">
              <div className="sm:flex sm:items-start">
                <div className="mx-auto flex h-12 w-12 flex-shrink-0 items-center justify-center rounded-full bg-green-100 sm:mx-0 sm:h-10 sm:w-10">
                  <CheckCircleIcon className="h-6 w-6 text-green-600" />
                </div>
                <div className="mt-3 text-center sm:ml-4 sm:mt-0 sm:text-left w-full">
                  <h3 className="text-lg font-medium leading-6 text-gray-900 mb-2">
                    MorphCard Created Successfully!
                  </h3>
                  <div className="mt-2">
                    <p className="text-sm text-gray-500 mb-4">
                      Your MorphCard has been created and is ready to use. Click on the card to view details.
                    </p>
                    
                    {/* Card Preview */}
                    <div className="w-full h-20 rounded-xl shadow-lg mb-4 bg-gradient-to-br from-blue-500 to-purple-600">
                      <div className="p-3 h-full flex flex-col justify-between text-white">
                        <div className="flex justify-between items-start">
                          <div className="w-6 h-6 bg-white/20 rounded-full flex items-center justify-center">
                            <span className="text-xs font-bold">M</span>
                          </div>
                          <div className="w-2 h-2 rounded-full bg-green-400" />
                        </div>
                        <div className="text-right">
                          <p className="text-xs opacity-80">Card Number</p>
                          <p className="text-sm font-mono font-bold">
                            {formData.cardNumber}
                          </p>
                        </div>
                        <div className="text-xs opacity-90 truncate">
                          {formData.cardName}
                        </div>
                      </div>
                    </div>
                    
                    <p className="text-xs text-gray-400">
                      This modal will close automatically in a moment...
                    </p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* MTN Mobile Money Payment Modal */}
      <MTNMobileMoneyPaymentModal
        isOpen={showMTNMobileMoney}
        onClose={() => setShowMTNMobileMoney(false)}
        onPaymentSuccess={handlePaymentSuccess}
        amount={formData.fundingAmount}
        currency={selectedCurrency}
        externalId={`CARD-${Date.now()}-${formData.fundingAmount}`}
      />

      {/* Crypto Payment Modal */}
      <CryptoPaymentModal
        isOpen={showCryptoPayment}
        onClose={() => setShowCryptoPayment(false)}
        onPaymentSuccess={handlePaymentSuccess}
        fundingAmount={formData.fundingAmount}
        feeAmount={0}
        totalAmount={formData.fundingAmount}
        ethAmount={ethAmount}
        currency={selectedCurrency}
      />
    </div>
  );
};
