"use client";

import { useEffect } from "react";
import { useScaffoldWatchContractEvent } from "~~/hooks/scaffold-eth/useScaffoldWatchContractEvent";
import { useAccount } from "wagmi";
import { useEnhancedAuth } from "~~/contexts/EnhancedAuthContext";
import { createClient } from "@supabase/supabase-js";

// Initialize Supabase client
const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
);

interface CardFundingSuccessEvent {
  args: {
    fundingId: bigint;
    user: string;
    amount: bigint;
    cardType: string;
    transactionHash: string;
  };
}

/**
 * Component that listens to CardFundingSuccess events from the PaymentContract
 * and automatically creates virtual cards in Supabase when funding is successful
 */
export const CardFundingListener = () => {
  const { address } = useAccount();
  const { user } = useEnhancedAuth();

  // Listen to CardFundingSuccess events
  useScaffoldWatchContractEvent({
    contractName: "PaymentContract",
    eventName: "CardFundingSuccess",
    onLogs: async (logs: CardFundingSuccessEvent[]) => {
      console.log("CardFundingSuccess events received:", logs);
      
      for (const log of logs) {
        const { fundingId, user: eventUser, amount, cardType, transactionHash } = log.args;
        
        // Only process events for the current user
        if (eventUser.toLowerCase() !== address?.toLowerCase()) {
          continue;
        }
        
        try {
          await handleCardFundingSuccess({
            fundingId: Number(fundingId),
            user: eventUser,
            amount: Number(amount),
            cardType,
            transactionHash,
          });
        } catch (error) {
          console.error("Error handling card funding success:", error);
        }
      }
    },
  });

  const handleCardFundingSuccess = async (eventData: {
    fundingId: number;
    user: string;
    amount: number;
    cardType: string;
    transactionHash: string;
  }) => {
    try {
      console.log("Processing card funding success:", eventData);
      
      if (!user) {
        console.error("User not authenticated");
        return;
      }

      // Generate card details
      const cardData = await generateCardDetails(eventData.cardType);
      
      // Create virtual card in Supabase
      const { data: card, error } = await supabase
        .from("virtual_cards")
        .insert({
          user_id: user.id,
          wallet_address: eventData.user,
          card_name: `${eventData.cardType} Card`,
          card_number: cardData.cardNumber,
          expiry_date: cardData.expiryDate,
          card_type: eventData.cardType,
          spending_limit: eventData.amount * 100, // Convert to cents
          current_spend: 0,
          balance: eventData.amount * 100, // Convert to cents
          is_active: true,
          payment_reference: `funding_${eventData.fundingId}`,
          transaction_hash: eventData.transactionHash,
          currency: "GHS",
          created_at: new Date().toISOString(),
        })
        .select()
        .single();

      if (error) {
        console.error("Error creating card in Supabase:", error);
        return;
      }

      console.log("Card created successfully in Supabase:", card);
      
      // You could also emit a success notification here
      // or update local state to refresh the UI
      
    } catch (error) {
      console.error("Error in handleCardFundingSuccess:", error);
    }
  };

  const generateCardDetails = async (cardType: string) => {
    // Generate a masked card number (in production, this would be generated by your payment processor)
    const maskedNumber = `****${Math.floor(Math.random() * 9000) + 1000}`;
    
    // Generate expiry date (3 years from now)
    const currentDate = new Date();
    const expiryDate = new Date(currentDate.getFullYear() + 3, currentDate.getMonth(), currentDate.getDate());
    const formattedExpiryDate = `${String(expiryDate.getMonth() + 1).padStart(2, '0')}/${String(expiryDate.getFullYear()).slice(-2)}`;
    
    return {
      cardNumber: maskedNumber,
      expiryDate: formattedExpiryDate,
    };
  };

  // This component doesn't render anything, it just listens to events
  return null;
};
