{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/PaymentContract.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n\r\n/**\r\n * PaymentContract - Blockchain Payment Processing for Card Funding\r\n * Handles ETH payments from ENS/connected wallets via Coinbase integration\r\n * Emits events for frontend to handle Supabase card creation\r\n * @author MorphCash Team\r\n */\r\ncontract PaymentContract is Ownable, ReentrancyGuard {\r\n    // Card Funding Struct\r\n    struct CardFunding {\r\n        uint256 fundingId;\r\n        address user;\r\n        uint256 amount; // Amount in wei (ETH)\r\n        uint256 ghsAmount; // Amount in GHS (for reference)\r\n        string cardType; // Visa, Mastercard, etc.\r\n        string paymentReference;\r\n        string transactionHash;\r\n        bool isProcessed;\r\n        uint256 createdAt;\r\n    }\r\n\r\n    // State Variables\r\n    address public immutable contractOwner;\r\n    uint256 public minimumFundingAmount = 0.001 ether; // Minimum 0.001 ETH\r\n    uint256 public maximumFundingAmount = 10 ether; // Maximum 10 ETH\r\n    \r\n    // Mappings\r\n    mapping(uint256 => CardFunding) public cardFundings;\r\n    mapping(string => uint256) public paymentReferenceToFundingId;\r\n    mapping(address => uint256[]) public userFundings;\r\n    \r\n    // Arrays\r\n    uint256 public nextFundingId = 1;\r\n\r\n    // Events\r\n    event CardFundingInitiated(uint256 indexed fundingId, address indexed user, uint256 amount, string paymentReference);\r\n    event CardFundingSuccess(uint256 indexed fundingId, address indexed user, uint256 amount, string cardType, string transactionHash);\r\n    event CardFundingFailed(uint256 indexed fundingId, address indexed user, string reason);\r\n\r\n    // Constructor\r\n    constructor(address _owner) {\r\n        contractOwner = _owner;\r\n        _transferOwnership(_owner);\r\n    }\r\n\r\n    // Modifier\r\n    modifier isOwner() {\r\n        require(msg.sender == contractOwner, \"Not the Owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Fund a virtual card with ETH payment\r\n     * This function is called when a user wants to fund their virtual card\r\n     * The payment is processed immediately and events are emitted for frontend handling\r\n     * @param ghsAmount Amount in GHS (for reference)\r\n     * @param cardType Type of card (Visa, Mastercard, etc.)\r\n     * @param paymentReference Payment reference for tracking\r\n     */\r\n    function fundCard(\r\n        uint256 ghsAmount,\r\n        string memory cardType,\r\n        string memory paymentReference\r\n    ) external payable nonReentrant {\r\n        require(msg.value >= minimumFundingAmount, \"Amount below minimum\");\r\n        require(msg.value <= maximumFundingAmount, \"Amount above maximum\");\r\n        require(bytes(paymentReference).length > 0, \"Reference cannot be empty\");\r\n        require(paymentReferenceToFundingId[paymentReference] == 0, \"Reference already exists\");\r\n        require(bytes(cardType).length > 0, \"Card type cannot be empty\");\r\n        \r\n        uint256 fundingId = nextFundingId++;\r\n        \r\n        CardFunding memory newFunding = CardFunding({\r\n            fundingId: fundingId,\r\n            user: msg.sender,\r\n            amount: msg.value,\r\n            ghsAmount: ghsAmount,\r\n            cardType: cardType,\r\n            paymentReference: paymentReference,\r\n            transactionHash: \"\",\r\n            isProcessed: false,\r\n            createdAt: block.timestamp\r\n        });\r\n        \r\n        cardFundings[fundingId] = newFunding;\r\n        paymentReferenceToFundingId[paymentReference] = fundingId;\r\n        userFundings[msg.sender].push(fundingId);\r\n        \r\n        emit CardFundingInitiated(fundingId, msg.sender, msg.value, paymentReference);\r\n        \r\n        // Process the funding immediately and emit success event\r\n        _processCardFunding(fundingId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to process card funding\r\n     * @param fundingId The funding ID to process\r\n     */\r\n    function _processCardFunding(uint256 fundingId) internal {\r\n        CardFunding storage funding = cardFundings[fundingId];\r\n        require(funding.fundingId != 0, \"Funding does not exist\");\r\n        require(!funding.isProcessed, \"Funding already processed\");\r\n        \r\n        // Set transaction hash (in a real implementation, this would come from the actual transaction)\r\n        funding.transactionHash = _generateTransactionHash(fundingId);\r\n        funding.isProcessed = true;\r\n        \r\n        emit CardFundingSuccess(fundingId, funding.user, funding.amount, funding.cardType, funding.transactionHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Generate a transaction hash for the funding\r\n     * In a real implementation, this would be the actual transaction hash\r\n     * @param fundingId The funding ID\r\n     * @return A generated transaction hash\r\n     */\r\n    function _generateTransactionHash(uint256 fundingId) internal view returns (string memory) {\r\n        return string(abi.encodePacked(\r\n            \"0x\",\r\n            _toHexString(block.timestamp),\r\n            _toHexString(fundingId),\r\n            _toHexString(uint256(uint160(msg.sender)))\r\n        ));\r\n    }\r\n\r\n    /**\r\n     * @dev Convert uint256 to hex string\r\n     * @param value The value to convert\r\n     * @return The hex string representation\r\n     */\r\n    function _toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp >>= 4;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        for (uint256 i = digits; i > 0; i--) {\r\n            buffer[i - 1] = bytes16(\"0123456789abcdef\")[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Set minimum and maximum funding amounts (owner only)\r\n     * @param _minimumAmount Minimum funding amount in wei\r\n     * @param _maximumAmount Maximum funding amount in wei\r\n     */\r\n    function setFundingLimits(uint256 _minimumAmount, uint256 _maximumAmount) external isOwner {\r\n        require(_minimumAmount > 0, \"Minimum amount must be greater than 0\");\r\n        require(_maximumAmount > _minimumAmount, \"Maximum must be greater than minimum\");\r\n        \r\n        minimumFundingAmount = _minimumAmount;\r\n        maximumFundingAmount = _maximumAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw contract balance (owner only)\r\n     * @param amount Amount to withdraw in wei\r\n     */\r\n    function withdraw(uint256 amount) external isOwner {\r\n        require(amount <= address(this).balance, \"Insufficient balance\");\r\n        require(amount > 0, \"Amount must be greater than 0\");\r\n        \r\n        payable(contractOwner).transfer(amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Emergency withdraw all funds (owner only)\r\n     */\r\n    function emergencyWithdraw() external isOwner {\r\n        uint256 balance = address(this).balance;\r\n        require(balance > 0, \"No funds to withdraw\");\r\n        \r\n        payable(contractOwner).transfer(balance);\r\n    }\r\n\r\n    /**\r\n     * @dev Get card funding details by ID\r\n     * @param fundingId The funding ID\r\n     * @return The card funding data\r\n     */\r\n    function getCardFunding(uint256 fundingId) external view returns (CardFunding memory) {\r\n        require(cardFundings[fundingId].fundingId != 0, \"Funding does not exist\");\r\n        return cardFundings[fundingId];\r\n    }\r\n\r\n    /**\r\n     * @dev Get card funding by reference\r\n     * @param paymentReference The payment reference\r\n     * @return The card funding data\r\n     */\r\n    function getCardFundingByReference(string memory paymentReference) external view returns (CardFunding memory) {\r\n        uint256 fundingId = paymentReferenceToFundingId[paymentReference];\r\n        require(fundingId != 0, \"Funding not found\");\r\n        return cardFundings[fundingId];\r\n    }\r\n\r\n    /**\r\n     * @dev Get all card fundings for a user\r\n     * @param userAddress The user's address\r\n     * @return Array of funding IDs\r\n     */\r\n    function getUserCardFundings(address userAddress) external view returns (uint256[] memory) {\r\n        return userFundings[userAddress];\r\n    }\r\n\r\n    /**\r\n     * @dev Check if a card funding is processed\r\n     * @param fundingId The funding ID\r\n     * @return True if processed, false otherwise\r\n     */\r\n    function isCardFundingProcessed(uint256 fundingId) external view returns (bool) {\r\n        require(cardFundings[fundingId].fundingId != 0, \"Funding does not exist\");\r\n        return cardFundings[fundingId].isProcessed;\r\n    }\r\n\r\n    /**\r\n     * @dev Get total number of card fundings\r\n     * @return The total number of fundings\r\n     */\r\n    function getTotalCardFundings() external view returns (uint256) {\r\n        return nextFundingId - 1;\r\n    }\r\n\r\n    /**\r\n     * @dev Get card fundings by processed status\r\n     * @param isProcessed Whether to filter by processed status\r\n     * @return Array of funding IDs matching the criteria\r\n     */\r\n    function getCardFundingsByStatus(bool isProcessed) external view returns (uint256[] memory) {\r\n        uint256[] memory matchingFundings = new uint256[](nextFundingId - 1);\r\n        uint256 count = 0;\r\n        \r\n        for (uint256 i = 1; i < nextFundingId; i++) {\r\n            if (cardFundings[i].isProcessed == isProcessed) {\r\n                matchingFundings[count] = i;\r\n                count++;\r\n            }\r\n        }\r\n        \r\n        // Resize array to actual count\r\n        uint256[] memory result = new uint256[](count);\r\n        for (uint256 i = 0; i < count; i++) {\r\n            result[i] = matchingFundings[i];\r\n        }\r\n        \r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Get contract balance\r\n     * @return The contract's ETH balance\r\n     */\r\n    function getContractBalance() external view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    /**\r\n     * @dev Get funding limits\r\n     * @return minimumAmount The minimum funding amount\r\n     * @return maximumAmount The maximum funding amount\r\n     */\r\n    function getFundingLimits() external view returns (uint256 minimumAmount, uint256 maximumAmount) {\r\n        return (minimumFundingAmount, maximumFundingAmount);\r\n    }\r\n\r\n    /**\r\n     * Function that allows the contract to receive ETH\r\n     */\r\n    receive() external payable {}\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}